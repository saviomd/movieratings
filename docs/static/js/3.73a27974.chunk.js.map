{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","helpers/formatMovieInfo.js","contexts/movieInfoContext.jsx","helpers/tmdbServices.js","helpers/formatMovieCredits.js","contexts/movieCreditsContext.jsx","helpers/formatMovieRecommendations.js","contexts/movieRecommendationsContext.jsx","components/Image/Image.jsx","components/Image/index.js","components/ScrollableHorizontalList/index.js","components/ScrollableHorizontalList/ScrollableHorizontalList.jsx","components/MovieInfo/MovieInfoCastCrew/index.js","components/MovieInfo/MovieInfoCastCrew/MovieInfoCastCrew.jsx","components/MovieInfo/MovieInfoRecommendations/index.js","components/MovieInfo/MovieInfoRecommendations/MovieInfoRecommendations.jsx","components/MovieInfo/MovieInfoBody/index.js","components/MovieInfo/MovieInfoBody/MovieInfoBody.jsx","components/MovieInfo/MovieInfoHeader/index.js","components/MovieInfo/MovieInfoHeader/MovieInfoHeader.jsx","components/MovieInfo/index.js","components/MovieInfo/MovieInfo.jsx","pages/PageMovieInfo.jsx"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","formatMovieInfo","movie","newMovie","backdrop_url","backdrop_path","tmdbApi","img","baseUrl","backdropSize","id","LetterboxdURI","original_language","toUpperCase","original_title","overview","poster_url","poster_path","posterSize","Rating","release_year","release_date","split","title","tmdbURI","vote_average","vote_count","MovieInfoContext","React","createContext","initialState","movieInfo","fallbackUrl","movieInfoStatus","reducer","state","action","type","payload","Error","MovieInfoStore","children","useReducer","dispatchMovieInfo","loadMovieInfo","useCallback","undefined","fetch","url","pathSearchMovies","key","Name","Year","then","response","ok","status","json","fetchMovieInfo","results","length","find","obj","indexOf","catch","useEffect","providerValue","useMemo","Provider","value","defaultProps","formatMovieCredits","movieCredits","cast","map","person","crew","MovieCreditsContext","movieCreditsStatus","MovieCreditsStore","movieId","dispatchMovieCredits","loadMovieCredits","pathMovieCredits","replace","fetchMovieCredits","formatMovieRecommendations","MovieRecommendationsContext","movieRecommendations","movieRecommendationsStatus","MovieRecommendationsStore","dispatchMovieRecommendations","loadMovieRecommendations","pathMovieRecommendations","fetchMovieRecommendations","Image","src","dimensions","backdrop","height","width","poster","style","paddingTop","className","alt","loading","ScrollableHorizontalList","overflowX","WebkitOverflowScrolling","MovieInfoCastCrew","useContext","movieCreditsContext","LoadingHandler","dataStatus","hasData","icon","href","rel","target","name","character","credit_id","job","MovieInfoRecommendations","movieRecommendationsContext","Anchor","MovieInfoBody","movieInfoContext","MovieInfoHeader","MovieInfo","PageMovieInfo","match","movieDiary","movieDiaryContext","movieRatings","movieRatingsContext","params","Id"],"mappings":"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","file":"static/js/3.73a27974.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import tmdbApi from \"./tmdbApi\";\n\nconst formatMovieInfo = (movie, newMovie) => ({\n  backdrop_url: newMovie.backdrop_path\n    ? tmdbApi.img.baseUrl + tmdbApi.img.backdropSize + newMovie.backdrop_path\n    : null,\n  id: newMovie.id,\n  LetterboxdURI: movie.LetterboxdURI,\n  original_language: newMovie.original_language.toUpperCase(),\n  original_title: newMovie.original_title,\n  overview: newMovie.overview,\n  poster_url: newMovie.poster_path\n    ? tmdbApi.img.baseUrl + tmdbApi.img.posterSize + newMovie.poster_path\n    : null,\n  Rating: movie.Rating,\n  release_year: newMovie.release_date.split(\"-\")[0],\n  title: newMovie.title,\n  tmdbURI: `https://www.themoviedb.org/movie/${newMovie.id}`,\n  vote_average: newMovie.vote_average,\n  vote_count: newMovie.vote_count,\n});\n\nexport default formatMovieInfo;\n","import PropTypes from \"prop-types\";\nimport React, { useCallback, useEffect, useMemo, useReducer } from \"react\";\n\nimport { fetchMovieInfo } from \"../helpers/tmdbServices\";\nimport tmdbApi from \"../helpers/tmdbApi\";\nimport formatMovieInfo from \"../helpers/formatMovieInfo\";\n\nconst MovieInfoContext = React.createContext();\n\nconst initialState = {\n  movieInfo: {\n    backdrop_url: tmdbApi.img.fallbackUrl,\n    id: \"\",\n    LetterboxdURI: \"\",\n    overview: \"\",\n    poster_url: tmdbApi.img.fallbackUrl,\n    Rating: \"\",\n    title: \"\",\n    vote_average: \"\",\n  },\n  movieInfoStatus: \"\",\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"setMovieInfo\":\n      return { ...state, movieInfo: action.payload, movieInfoStatus: \"loaded\" };\n    case \"setMovieInfoStatus\":\n      return { ...state, movieInfoStatus: action.payload };\n    default:\n      throw new Error();\n  }\n}\n\nconst MovieInfoStore = ({ children, movie }) => {\n  const [state, dispatchMovieInfo] = useReducer(reducer, initialState);\n\n  const loadMovieInfo = useCallback(() => {\n    if (movie !== undefined) {\n      dispatchMovieInfo({ type: \"setMovieInfoStatus\", payload: \"loading\" });\n      fetchMovieInfo(movie)\n        .then((json) => {\n          if (json.results.length) {\n            const newMovie = json.results.find(\n              (obj) =>\n                obj.title === movie.Name &&\n                obj.release_date.indexOf(movie.Year) > -1\n            );\n            if (newMovie !== undefined) {\n              dispatchMovieInfo({\n                type: \"setMovieInfo\",\n                payload: formatMovieInfo(movie, newMovie),\n              });\n            } else {\n              throw Error(\"No movie found\");\n            }\n          } else {\n            throw Error(\"No movie found\");\n          }\n        })\n        .catch(() => {\n          dispatchMovieInfo({ type: \"setMovieInfoStatus\", payload: \"error\" });\n        });\n    } else {\n      dispatchMovieInfo({ type: \"setMovieInfoStatus\", payload: \"error\" });\n    }\n  }, [movie]);\n\n  useEffect(() => {\n    loadMovieInfo();\n  }, [loadMovieInfo]);\n\n  const providerValue = useMemo(() => state, [state]);\n  return (\n    <MovieInfoContext.Provider value={providerValue}>\n      {children}\n    </MovieInfoContext.Provider>\n  );\n};\n\nMovieInfoStore.propTypes = {\n  children: PropTypes.node.isRequired,\n  movie: PropTypes.shape({\n    Name: PropTypes.string.isRequired,\n    Year: PropTypes.number.isRequired,\n  }),\n};\n\nMovieInfoStore.defaultProps = {\n  movie: undefined,\n};\n\nexport { MovieInfoContext as default, MovieInfoStore };\n","import tmdbApi from \"./tmdbApi\";\n\nexport const fetchMovieCredits = (movieId) => {\n  const url =\n    `${tmdbApi.url}${tmdbApi.pathMovieCredits}?${tmdbApi.key}`.replace(\n      \"{movie_id}\",\n      movieId\n    );\n  return fetch(url).then((response) => {\n    if (!response.ok) {\n      throw Error(response.status);\n    }\n    return response.json();\n  });\n};\n\nexport const fetchMovieInfo = (movie) =>\n  fetch(\n    `${tmdbApi.url}${tmdbApi.pathSearchMovies}?${tmdbApi.key}&query=${movie.Name}&year=${movie.Year}`\n  ).then((response) => {\n    if (!response.ok) {\n      throw Error(response.status);\n    }\n    return response.json();\n  });\n\nexport const fetchMovieRecommendations = (movieId) => {\n  const url =\n    `${tmdbApi.url}${tmdbApi.pathMovieRecommendations}?${tmdbApi.key}`.replace(\n      \"{movie_id}\",\n      movieId\n    );\n  return fetch(url).then((response) => {\n    if (!response.ok) {\n      throw Error(response.status);\n    }\n    return response.json();\n  });\n};\n","const formatMovieCredits = (movieCredits) => ({\n  ...movieCredits,\n  cast: movieCredits.cast.map((person) => ({\n    ...person,\n    tmdbURI: `https://www.themoviedb.org/person/${person.id}`,\n  })),\n  crew: movieCredits.crew.map((person) => ({\n    ...person,\n    tmdbURI: `https://www.themoviedb.org/person/${person.id}`,\n  })),\n});\n\nexport default formatMovieCredits;\n","import PropTypes from \"prop-types\";\nimport React, { useEffect, useMemo, useReducer } from \"react\";\n\nimport formatMovieCredits from \"../helpers/formatMovieCredits\";\nimport { fetchMovieCredits } from \"../helpers/tmdbServices\";\n\nconst MovieCreditsContext = React.createContext();\n\nconst initialState = {\n  movieCredits: {\n    cast: [],\n    crew: [],\n    id: \"\",\n  },\n  movieCreditsStatus: \"\",\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"setMovieCredits\":\n      return {\n        ...state,\n        movieCredits: action.payload,\n        movieCreditsStatus: \"loaded\",\n      };\n    case \"setMovieCreditsStatus\":\n      return { ...state, movieCreditsStatus: action.payload };\n    default:\n      throw new Error();\n  }\n}\n\nconst MovieCreditsStore = ({ children, movieId }) => {\n  const [state, dispatchMovieCredits] = useReducer(reducer, initialState);\n\n  function loadMovieCredits(id) {\n    dispatchMovieCredits({ type: \"setMovieCreditsStatus\", payload: \"loading\" });\n    fetchMovieCredits(id)\n      .then((json) => {\n        dispatchMovieCredits({\n          type: \"setMovieCredits\",\n          payload: formatMovieCredits(json),\n        });\n      })\n      .catch(() => {\n        dispatchMovieCredits({\n          type: \"setMovieCreditsStatus\",\n          payload: \"error\",\n        });\n      });\n  }\n\n  useEffect(() => {\n    loadMovieCredits(movieId);\n  }, [movieId]);\n\n  const providerValue = useMemo(() => state, [state]);\n  return (\n    <MovieCreditsContext.Provider value={providerValue}>\n      {children}\n    </MovieCreditsContext.Provider>\n  );\n};\n\nMovieCreditsStore.propTypes = {\n  children: PropTypes.node.isRequired,\n  movieId: PropTypes.number.isRequired,\n};\n\nexport { MovieCreditsContext as default, MovieCreditsStore };\n","import tmdbApi from \"./tmdbApi\";\n\nconst formatMovieRecommendations = (results) =>\n  results.map((movie) => ({\n    ...movie,\n    poster_url: movie.poster_path\n      ? tmdbApi.img.baseUrl + tmdbApi.img.posterSize + movie.poster_path\n      : null,\n    tmdbURI: `https://www.themoviedb.org/movie/${movie.id}`,\n  }));\n\nexport default formatMovieRecommendations;\n","import PropTypes from \"prop-types\";\nimport React, { useEffect, useMemo, useReducer } from \"react\";\n\nimport formatMovieRecommendations from \"../helpers/formatMovieRecommendations\";\nimport { fetchMovieRecommendations } from \"../helpers/tmdbServices\";\n\nconst MovieRecommendationsContext = React.createContext();\n\nconst initialState = {\n  movieRecommendations: [],\n  movieRecommendationsStatus: \"\",\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"setMovieRecommendations\":\n      return {\n        ...state,\n        movieRecommendations: action.payload,\n        movieRecommendationsStatus: \"loaded\",\n      };\n    case \"setMovieRecommendationsStatus\":\n      return { ...state, movieRecommendationsStatus: action.payload };\n    default:\n      throw new Error();\n  }\n}\n\nconst MovieRecommendationsStore = ({ children, movieId }) => {\n  const [state, dispatchMovieRecommendations] = useReducer(\n    reducer,\n    initialState\n  );\n\n  function loadMovieRecommendations(id) {\n    dispatchMovieRecommendations({\n      type: \"setMovieRecommendationsStatus\",\n      payload: \"loading\",\n    });\n    fetchMovieRecommendations(id)\n      .then((json) => {\n        dispatchMovieRecommendations({\n          type: \"setMovieRecommendations\",\n          payload: formatMovieRecommendations(json.results),\n        });\n      })\n      .catch(() => {\n        dispatchMovieRecommendations({\n          type: \"setMovieRecommendationsStatus\",\n          payload: \"error\",\n        });\n      });\n  }\n\n  useEffect(() => {\n    loadMovieRecommendations(movieId);\n  }, [movieId]);\n\n  const providerValue = useMemo(() => state, [state]);\n  return (\n    <MovieRecommendationsContext.Provider value={providerValue}>\n      {children}\n    </MovieRecommendationsContext.Provider>\n  );\n};\n\nMovieRecommendationsStore.propTypes = {\n  children: PropTypes.node.isRequired,\n  movieId: PropTypes.number.isRequired,\n};\n\nexport { MovieRecommendationsContext as default, MovieRecommendationsStore };\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nconst Image = ({ src, title, type }) => {\n  const types = {\n    backdrop: {\n      height: 300,\n      width: 533,\n    },\n    poster: {\n      height: 450,\n      width: 300,\n    },\n  };\n  const dimensions = types[type];\n  const style = {\n    paddingTop: `${(dimensions.height / dimensions.width) * 100}%`,\n  };\n  return (\n    <div className=\"bg-secondary ratio text-white\" style={style}>\n      {src ? (\n        <img alt={`${type} for ${title}`} loading=\"lazy\" src={src} />\n      ) : (\n        <div className=\"p-3 text-center\">{`No ${type} available for ${title}`}</div>\n      )}\n    </div>\n  );\n};\n\nImage.propTypes = {\n  src: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  type: PropTypes.oneOf([\"backdrop\", \"poster\"]).isRequired,\n};\n\nImage.defaultProps = {\n  src: null,\n};\n\nexport default Image;\n","import Image from \"./Image\";\n\nexport default Image;\n","import ScrollableHorizontalList from \"./ScrollableHorizontalList\";\n\nexport default ScrollableHorizontalList;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nconst ScrollableHorizontalList = ({ children }) => {\n  const verticalListStyle = {\n    overflowX: \"scroll\",\n    WebkitOverflowScrolling: \"touch\",\n  };\n  return (\n    <ul\n      className=\"flex-nowrap g-3 list-unstyled mb-0 pb-3 row\"\n      style={verticalListStyle}\n    >\n      {children}\n    </ul>\n  );\n};\n\nScrollableHorizontalList.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ScrollableHorizontalList;\n","import MovieInfoCastCrew from \"./MovieInfoCastCrew\";\n\nexport default MovieInfoCastCrew;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useContext } from \"react\";\n\nimport movieCreditsContext from \"../../../contexts/movieCreditsContext\";\nimport LoadingHandler from \"../../LoadingHandler\";\nimport ScrollableHorizontalList from \"../../ScrollableHorizontalList\";\n\nconst MovieInfoCastCrew = () => {\n  const { movieCredits, movieCreditsStatus } = useContext(movieCreditsContext);\n  return (\n    <LoadingHandler dataStatus={movieCreditsStatus} hasData={!!movieCredits.id}>\n      <h2 className=\"h4\">\n        Cast\n        <FontAwesomeIcon className=\"ms-1 small\" icon=\"external-link-alt\" />\n      </h2>\n      {movieCredits.cast.length ? (\n        <ScrollableHorizontalList>\n          {movieCredits.cast.map((person) => (\n            <li className=\"col-auto\" key={person.credit_id}>\n              <a\n                className=\"btn btn-secondary btn-sm\"\n                href={person.tmdbURI}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                {person.name}\n                <div className=\"small\">{person.character}</div>\n              </a>\n            </li>\n          ))}\n        </ScrollableHorizontalList>\n      ) : (\n        <p>No data available</p>\n      )}\n      <h2 className=\"h4\">\n        Crew\n        <FontAwesomeIcon className=\"ms-1 small\" icon=\"external-link-alt\" />\n      </h2>\n      {movieCredits.crew.length ? (\n        <ScrollableHorizontalList>\n          {movieCredits.crew.map((person) => (\n            <li className=\"col-auto\" key={person.credit_id}>\n              <a\n                className=\"btn btn-secondary btn-sm\"\n                href={person.tmdbURI}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                {person.name}\n                <div className=\"small\">{person.job}</div>\n              </a>\n            </li>\n          ))}\n        </ScrollableHorizontalList>\n      ) : (\n        <p>No data available</p>\n      )}\n    </LoadingHandler>\n  );\n};\n\nexport default MovieInfoCastCrew;\n","import MovieInfoRecommendations from \"./MovieInfoRecommendations\";\n\nexport default MovieInfoRecommendations;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useContext } from \"react\";\n\nimport movieRecommendationsContext from \"../../../contexts/movieRecommendationsContext\";\nimport Anchor from \"../../Anchor\";\nimport Image from \"../../Image\";\nimport LoadingHandler from \"../../LoadingHandler\";\nimport ScrollableHorizontalList from \"../../ScrollableHorizontalList\";\n\nconst MovieInfoRecommendations = () => {\n  const { movieRecommendations, movieRecommendationsStatus } = useContext(\n    movieRecommendationsContext\n  );\n  return (\n    <LoadingHandler\n      dataStatus={movieRecommendationsStatus}\n      hasData={!!movieRecommendations.length}\n    >\n      <div className=\"p-3\">\n        <h2 className=\"h4\">\n          Recommendations\n          <FontAwesomeIcon className=\"ms-1 small\" icon=\"external-link-alt\" />\n        </h2>\n        <ScrollableHorizontalList>\n          {movieRecommendations.map((movie) => (\n            <li className=\"col-5 col-md-3 col-lg-2\" key={movie.id}>\n              <Anchor href={movie.tmdbURI} target=\"_blank\">\n                <Image\n                  src={movie.poster_url}\n                  title={movie.title}\n                  type=\"poster\"\n                />\n                {movie.title}\n              </Anchor>\n            </li>\n          ))}\n        </ScrollableHorizontalList>\n      </div>\n    </LoadingHandler>\n  );\n};\n\nexport default MovieInfoRecommendations;\n","import MovieInfoBody from \"./MovieInfoBody\";\n\nexport default MovieInfoBody;\n","import React, { useContext } from \"react\";\n\nimport { MovieCreditsStore } from \"../../../contexts/movieCreditsContext\";\nimport { MovieRecommendationsStore } from \"../../../contexts/movieRecommendationsContext\";\nimport movieInfoContext from \"../../../contexts/movieInfoContext\";\nimport Image from \"../../Image\";\nimport MovieInfoCastCrew from \"../MovieInfoCastCrew\";\nimport MovieInfoRecommendations from \"../MovieInfoRecommendations\";\n\nconst MovieInfoBody = () => {\n  const { movieInfo } = useContext(movieInfoContext);\n  return (\n    <>\n      <div className=\"p-3\">\n        <div className=\"animate__animated animate__fadeInUp mb-3 row\">\n          <div className=\"col-6 col-lg-4\">\n            <Image\n              src={movieInfo.poster_url}\n              title={movieInfo.title}\n              type=\"poster\"\n            />\n          </div>\n          <div className=\"col-12 col-sm-6 col-lg-8 text-end\">\n            <div className=\"lead text-start\">{movieInfo.overview}</div>\n            <div className=\"mb-3\">\n              <span className=\"badge bg-secondary ms-2\">\n                {movieInfo.original_language}\n              </span>\n            </div>\n            <div className=\"mb-3\">\n              <a\n                className=\"btn btn-danger btn-sm\"\n                href={movieInfo.LetterboxdURI}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                View movie at Letterboxd\n              </a>\n            </div>\n            <div className=\"mb-3\">\n              <a\n                className=\"btn btn-danger btn-sm\"\n                href={movieInfo.tmdbURI}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                View movie at TMDB\n              </a>\n            </div>\n          </div>\n        </div>\n        <MovieCreditsStore movieId={movieInfo.id}>\n          <MovieInfoCastCrew />\n        </MovieCreditsStore>\n      </div>\n      <Image\n        src={movieInfo.backdrop_url}\n        title={movieInfo.title}\n        type=\"backdrop\"\n      />\n      <MovieRecommendationsStore movieId={movieInfo.id}>\n        <MovieInfoRecommendations />\n      </MovieRecommendationsStore>\n    </>\n  );\n};\n\nexport default MovieInfoBody;\n","import MovieInfoHeader from \"./MovieInfoHeader\";\n\nexport default MovieInfoHeader;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useContext } from \"react\";\n\nimport movieInfoContext from \"../../../contexts/movieInfoContext\";\n\nconst MovieInfoHeader = () => {\n  const { movieInfo } = useContext(movieInfoContext);\n  return (\n    <div className=\"bg-secondary p-3\">\n      <h1 className=\"h3\">\n        {movieInfo.title}\n        <span className=\"font-italic ms-2 small\">{`(${movieInfo.release_year}${\n          movieInfo.title !== movieInfo.original_title\n            ? `, \"${movieInfo.original_title}\"`\n            : \"\"\n        })`}</span>\n      </h1>\n      <div className=\"small\">\n        {movieInfo.Rating} of 5\n        <FontAwesomeIcon className=\"mx-1 text-warning\" icon=\"star\" />\n        <span className=\"small\">by me</span>\n      </div>\n      <div className=\"small\">\n        {movieInfo.vote_average} of 10\n        <FontAwesomeIcon className=\"mx-1 text-warning\" icon=\"star\" />\n        <span className=\"small\">{`by ${movieInfo.vote_count} TMDb users`}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieInfoHeader;\n","import MovieInfo from \"./MovieInfo\";\n\nexport default MovieInfo;\n","import React, { useContext } from \"react\";\n\nimport movieInfoContext from \"../../contexts/movieInfoContext\";\nimport LoadingHandler from \"../LoadingHandler\";\nimport MovieInfoBody from \"./MovieInfoBody\";\nimport MovieInfoHeader from \"./MovieInfoHeader\";\n\nconst MovieInfo = () => {\n  const { movieInfo, movieInfoStatus } = useContext(movieInfoContext);\n  return (\n    <LoadingHandler dataStatus={movieInfoStatus} hasData={movieInfo.id !== \"\"}>\n      <div className=\"border border-secondary mb-3 rounded\">\n        <MovieInfoHeader />\n        <MovieInfoBody />\n      </div>\n    </LoadingHandler>\n  );\n};\n\nexport default MovieInfo;\n","import PropTypes from \"prop-types\";\nimport React, { useContext } from \"react\";\n\nimport { MovieInfoStore } from \"../contexts/movieInfoContext\";\nimport movieDiaryContext from \"../contexts/movieDiaryContext\";\nimport movieRatingsContext from \"../contexts/movieRatingsContext\";\nimport MovieInfo from \"../components/MovieInfo\";\n\nconst PageMovieInfo = ({ match }) => {\n  const { movieDiary } = useContext(movieDiaryContext);\n  const { movieRatings } = useContext(movieRatingsContext);\n  const { movieId } = match.params;\n  const movie = [...movieDiary, ...movieRatings].find(\n    (obj) => obj.Id === movieId\n  );\n  return (\n    <MovieInfoStore movie={movie}>\n      <MovieInfo />\n    </MovieInfoStore>\n  );\n};\n\nPageMovieInfo.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      movieId: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default PageMovieInfo;\n"],"sourceRoot":""}